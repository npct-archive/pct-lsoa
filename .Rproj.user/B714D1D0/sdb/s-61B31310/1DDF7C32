{
    "collab_server" : "",
    "contents" : "# Aim: find and re-add 'missing lines'\nsource(\"set-up.R\")\ncents = geojsonio::geojson_read(\"../pct-bigdata/cents-scenarios.geojson\", what = \"sp\")\n# load OD data - source http://wicid.ukdataservice.ac.uk/\nunzip(\"../pct-bigdata/wu03ew_msoa.zip\")\nflow_cens = readr::read_csv(\"wu03ew_msoa.csv\")\nfile.remove(\"wu03ew_msoa.csv\")\nnrow(flow_cens) # 2.4 m\nmissing = readr::read_csv(\"D:/Users/earmmor/OneDrive - University of Leeds/Cycling/Data/161012_UnsuccessfulODpairs.csv\")\n\ncent_missing = subset(flow_cens,which(flow_cens$`Area of residence` %in% missing$msoa1))\nf <- flow_cens[flow_cens$`Area of residence` %in% missing$msoa1,]\nf <- f[f$`Area of workplace` %in% missing$msoa2,]\nf$mjoind <- paste(f$`Area of residence`, f$`Area of workplace`)\nmissing$mjoined <- paste(missing$msoa1, missing$msoa2)\nf <- f[f$mjoind %in% missing$mjoined, ]\nflow <- f\n# subset the centroids for testing (comment to generate national data)\n\n#cents = cents[grep(pattern = \"Camb\", x = cents$geo_label),]\n#plot(cents)\no <- flow_cens$`Area of residence` %in% cents$geo_code\nd <- flow_cens$`Area of workplace` %in% cents$geo_code\nflow <- flow_cens[o & d, ] # subset OD pairs with o and d in study area\n\nomatch = match(flow$`Area of residence`, cents$geo_code)\ndmatch = match(flow$`Area of workplace`, cents$geo_code)\n\ncents_o = cents@coords[omatch,]\ncents_d = cents@coords[dmatch,]\nsummary(is.na(cents_o)) # check how many origins don't match\nsummary(is.na(cents_d))\ngeodist = geosphere::distHaversine(p1 = cents_o, p2 = cents_d) / 1000 # assign euclidean distanct to lines (could be a function in stplanr)\nsummary(is.na(geodist))\n\nhist(geodist, breaks = 0:800)\nflow$dist = geodist\nflow = flow[!is.na(flow$dist),] # there are 36k destinations with no matching cents - remove\n\n#####Important settings #######\nflow = flow[flow$dist >= 20,] # subset based on euclidean distance\nflow = flow[flow$dist < 30,]\n##############################\n\nnames(flow) = gsub(pattern = \" \", \"_\", names(flow))\nflow_twoway = flow\nflow = onewayid(flow, attrib = 3:14)\nflow[1:2] = cbind(pmin(flow[[1]], flow[[2]]), pmax(flow[[1]], flow[[2]]))\nnrow(flow) # down to 0.9m, removed majority of lines\nlines = od2line2(flow = flow, zones = cents)\nplot(lines)\n\nclass(lines)\nlength(lines)\nlines = SpatialLinesDataFrame(sl = lines, data = flow)\nnames(lines)\nproj4string(lines) = CRS(\"+init=epsg:4326\") # set crs\n\nsum(lines$`All_categories:_Method_of_travel_to_work`)\nsummary(lines$`All_categories:_Method_of_travel_to_work`)\n\n# to be removed when this is in stplanr\nod_dist <- function(flow, zones){\n  omatch = match(flow[[1]], cents@data[[1]])\n  dmatch = match(flow[[2]], cents@data[[1]])\n  cents_o = cents@coords[omatch,]\n  cents_d = cents@coords[dmatch,]\n  geosphere::distHaversine(p1 = cents_o, p2 = cents_d)\n}\n\nlines$dist = od_dist(flow = lines@data, zones = cents) / 1000\n\nsummary(lines$dist)\n\nlines@data <- dplyr::rename(lines@data,\n                            msoa1 = Area_of_residence,\n                            msoa2 = Area_of_workplace,\n                            all = `All_categories:_Method_of_travel_to_work`,\n                            bicycle = Bicycle,\n                            train = Train,\n                            bus = `Bus,_minibus_or_coach`,\n                            car_driver = `Driving_a_car_or_van`,\n                            car_passenger = `Passenger_in_a_car_or_van`,\n                            foot = On_foot,\n                            taxi = Taxi,\n                            motorbike = `Motorcycle,_scooter_or_moped`,\n                            light_rail = `Underground,_metro,_light_rail,_tram`,\n                            other = Other_method_of_travel_to_work\n)\n\nlines$Work_mainly_at_or_from_home <- NULL\n\nnames(lines)\n\n# generate the fastest routes\nrq = line2route(l = lines, route_fun = route_cyclestreet, plan = \"quietest\", base_url = \"http://pct.cyclestreets.net/api/\")\nsaveRDS(rq,file =\"../pct-bigdata/msoa_rerun/oldway/rq_EW_20-30.Rds\")\n\n\nrf = line2route(l = lines, route_fun = route_cyclestreet, plan = \"fastest\", base_url = \"http://pct.cyclestreets.net/api/\")\nsaveRDS(rf,file =\"../pct-bigdata/msoa_rerun/oldway/rf_EW_20-30.Rds\")\n\nsaveRDS(lines, file =\"../pct-bigdata/msoa_rerun/oldway/lines_missing_2.Rds\")\n\n",
    "created" : 1479990373429.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2929775634",
    "id" : "1DDF7C32",
    "lastKnownWriteTime" : 1478276996,
    "last_content_update" : 1478276996,
    "path" : "D:/Git/pct-load/R/generate_lines.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}